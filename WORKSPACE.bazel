workspace(name = "com_github_dlab_integration_lab")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load(
    "//:def.bzl",
    "BUILDTOOL_HASH",
    "BUILDTOOL_VERSION",
    "GAZELLE_RULE_HASH",
    "GAZELLE_RULE_VERSION",
    "GO_RULE_HASH",
    "GO_RULE_VERSION",
    "GO_VERSION",
    "PROTO_BUF_RULE_HASH",
    "PROTO_BUF_RULE_VERSION",
    "RULES_JVM_EXTERNAL_SHA",
    "RULES_JVM_EXTERNAL_TAG",
    "RULES_PYTHON_SHA",
    "RULES_PYTHON_VERSION",
)

########## Buildifier setup start ###############
# buildifier is written in Go and hence needs rules_go to be built.
# See https://github.com/bazelbuild/rules_go for the up to date setup instructions.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = GO_RULE_HASH,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v{}/rules_go-v{}.zip".format(GO_RULE_VERSION, GO_RULE_VERSION),
        "https://github.com/bazelbuild/rules_go/releases/download/v{}/rules_go-v{}.zip".format(GO_RULE_VERSION, GO_RULE_VERSION),
    ],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies")

go_rules_dependencies()

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains")

go_register_toolchains(version = GO_VERSION)

http_archive(
    name = "bazel_gazelle",
    sha256 = GAZELLE_RULE_HASH,
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v{}/bazel-gazelle-v{}.tar.gz".format(GAZELLE_RULE_VERSION, GAZELLE_RULE_VERSION),
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v{}/bazel-gazelle-v{}.tar.gz".format(GAZELLE_RULE_VERSION, GAZELLE_RULE_VERSION),
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("//containers:deps.bzl", "go_dependencies")

# gazelle:repository_macro containers/deps.bzl%go_dependencies
go_dependencies()

gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

http_archive(
    name = "com_google_protobuf",
    sha256 = PROTO_BUF_RULE_HASH,
    strip_prefix = "protobuf-{}".format(PROTO_BUF_RULE_VERSION),
    urls = [
        "https://github.com/protocolbuffers/protobuf/archive/v{}.tar.gz".format(PROTO_BUF_RULE_VERSION),
    ],
)

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()

http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = BUILDTOOL_HASH,
    strip_prefix = "buildtools-{}".format(BUILDTOOL_VERSION),
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/refs/tags/{}.tar.gz".format(BUILDTOOL_VERSION),
    ],
)

########## Buildifier setup end ###############
###############################################
###############################################
########## Rules JVM external start ###########
http_archive(
    name = "rules_jvm_external",
    sha256 = RULES_JVM_EXTERNAL_SHA,
    strip_prefix = "rules_jvm_external-{}".format(RULES_JVM_EXTERNAL_TAG),
    url = "https://github.com/bazelbuild/rules_jvm_external/archive/{}.zip".format(RULES_JVM_EXTERNAL_TAG),
)

load("@rules_jvm_external//:repositories.bzl", "rules_jvm_external_deps")

rules_jvm_external_deps()

load("@rules_jvm_external//:setup.bzl", "rules_jvm_external_setup")

rules_jvm_external_setup()

## TODO add maven deps
########## RUles JVM external end   ###########
###############################################
###############################################
########## Python rules start #################
#http_archive(
#    name = "rules_python",
#    sha256 = RULES_PYTHON_SHA,
#    strip_prefix = "rules_python-{}".format(RULES_PYTHON_VERSION),
#    url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/{}.tar.gz".format(RULES_PYTHON_VERSION),
#)

#load("@rules_python//python:repositories.bzl", "python_register_toolchains")

#python_register_toolchains(
#    name = "python3_10",
# Available versions are listed in @rules_python//python:versions.bzl.
# We recommend using the same version your team is already standardized on.
#    python_version = "3.10",
#)
#load("@python3_10//:defs.bzl", "interpreter")

#load("@rules_python//python:pip.bzl", "pip_parse")
###############################################
###############################################
###############################################
